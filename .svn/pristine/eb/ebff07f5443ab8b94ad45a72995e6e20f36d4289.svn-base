package kr.co.shovvel.dm.controller.logis.logis;

import kr.co.shovvel.dm.common.Consts;
import kr.co.shovvel.dm.domain.logis.apply.LogisApplyInfo;
import kr.co.shovvel.dm.domain.logis.search.LogisSearchInfo;
import kr.co.shovvel.dm.service.logis.logis.LogisService;
import org.apache.log4j.Logger;
import org.sonatype.aether.util.graph.PreorderNodeListGenerator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping(value = "/user/logis")
public class LogisController {

    private Logger logger = Logger.getLogger(this.getClass());

    @Autowired
    private LogisService logisService;

    @RequestMapping("/apply")
    public ModelAndView apply(HttpServletResponse response, HttpServletRequest request, Model model) {
        response.setHeader("Cache-Control", "no-cache");

        ModelAndView mav = new ModelAndView();
        mav.setViewName("logis/apply/logisApply");
        return mav;
    }

    @RequestMapping("/applyAction")
    public String applyAction(HttpServletRequest request, Model model) {
        HttpSession session = request.getSession();
        String userUid = (String) session.getAttribute("userUid");

        // 핸드폰 010 + 0000 + 0000 합치는 작업
        String senderPhoneNumber = request.getParameter("senderPhone1") + request.getParameter("senderPhone2") + request.getParameter("senderPhone3");
        String receiverPhoneNumber = request.getParameter("receiverPhone1") + request.getParameter("receiverPhone2") + request.getParameter("receiverPhone3");

        // 전달 받은 데이터를 객체에 담는다.
        LogisApplyInfo logisApplyInfo = new LogisApplyInfo();
        logisApplyInfo.setUserUid(userUid);
        logisApplyInfo.setSenderName(request.getParameter("senderName"));

        logisApplyInfo.setSenderPhone(senderPhoneNumber);
        logisApplyInfo.setSenderPostcode(request.getParameter("senderPostcode"));
        logisApplyInfo.setSenderAddress(request.getParameter("senderAddress"));

        logisApplyInfo.setReceiverName(request.getParameter("receiverName"));
        logisApplyInfo.setReceiverPhone(receiverPhoneNumber);
        logisApplyInfo.setReceiverPostcode(request.getParameter("receiverPostcode"));
        logisApplyInfo.setReceiverAddress(request.getParameter("receiverAddress"));

        logisApplyInfo.setWeight(request.getParameter("weight"));

        // FIXME: 2020/11/05 현재 가격은 따로 구현하지 않음
        // logisApplyInfo.setPrice(Integer.parseInt(request.getParameter("price")));
        logisApplyInfo.setPrice(20000);

        // 회원 고유번호 추가
        String result = logisService.applyAction(logisApplyInfo);

        if (result.equals(Consts.LOGIS_APPLY_RESULT.SUCCESS)) {
            return "redirect:/user/home/home";
        } else {
            return "redirect:/user/logis/apply";
        }
    }

    @RequestMapping("/search")
    public ModelAndView search(HttpServletResponse response, HttpServletRequest request, Model model) {
        response.setHeader("Cache-Control", "no-cache");

        HttpSession session = request.getSession();
        String userUid = (String) session.getAttribute("userUid");

        List<LogisSearchInfo> infoList = logisService.searchLogisHistory(userUid);

        ModelAndView mav = new ModelAndView();
        mav.addObject("infoList", infoList);
        mav.setViewName("logis/search/logisSearch");
        return mav;
    }

    @RequestMapping("/searchDetail")
    public ModelAndView searchDetail(HttpServletResponse response, HttpServletRequest request, Model model) {
        response.setHeader("Cache-Control", "no-cache");

        String logisHistUid = request.getParameter("logisHistUid");

        LogisSearchInfo info = logisService.searchLogisDetail(logisHistUid);

        ModelAndView mav = new ModelAndView();
        mav.addObject("info", info);
        mav.setViewName("logis/search/logisSearchDetail");
        return mav;
    }

    @RequestMapping("/order")
    public ModelAndView order(HttpServletResponse response, HttpServletRequest request, @RequestParam Map<String, Object> param, Model model) {
        String isStatus = (String) param.get("checkPayMethod");

        // 창고에서는 제품 수량과 기간을 받았는데, 택배에서는 어떻게 처리를 해야할까?
        ModelAndView mav = new ModelAndView();
        mav.addObject("isStatus", isStatus);
        mav.setViewName("logis/complete/logisComplete");
        return mav;
    }
}
